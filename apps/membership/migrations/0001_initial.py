# Generated by Django 5.0.7 on 2025-05-29 19:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('deactivation_date', models.DateTimeField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='e-mail')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='imię')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='nazwisko')),
                ('is_staff', models.BooleanField(default=False, verbose_name='w zespole')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'użytkownik',
                'verbose_name_plural': 'użytkownicy',
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(blank=True, max_length=100, verbose_name='nazwa użytkownika')),
                ('attempted_at', models.DateTimeField(verbose_name='attempt date and time')),
                ('has_logged_in', models.BooleanField(blank=True, default=False, verbose_name='logged in')),
                ('browser', models.CharField(blank=True, max_length=300, verbose_name='browser')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adres IP')),
                ('geolocation', models.JSONField(blank=True, default={}, verbose_name='geolocation')),
                (
                    'user',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='użytkownik',
                    ),
                ),
            ],
            options={
                'verbose_name': 'user login attempt',
                'verbose_name_plural': 'user login attempts',
            },
        ),
    ]
